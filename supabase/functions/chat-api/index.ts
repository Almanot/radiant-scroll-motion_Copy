
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
const messageStore = new Map<string, string>();

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  console.log('üöÄ Chat API –≤—ã–∑–≤–∞–Ω:', req.method, req.url);

  try {
    if (req.method === 'POST') {
      const body = await req.json();
      console.log('üì® POST –¥–∞–Ω–Ω—ã–µ:', body);
      
      const { action, chatId, message, userMessage } = body;
      
      if (action === 'send') {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ n8n
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ n8n:', userMessage);
        
        const n8nResponse = await fetch('https://n8n.srv838454.hstgr.cloud/webhook/84ac1eaf-efe6-4517-bc28-5b239286b274', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: chatId,
            message: userMessage
          })
        });
        
        if (!n8nResponse.ok) {
          throw new Error(`N8N error: ${n8nResponse.status}`);
        }
        
        console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ n8n');
        
        return new Response(JSON.stringify({ 
          success: true, 
          message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' 
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ webhook –æ—Ç n8n (–±–µ–∑ action)
      if (!action && chatId && message) {
        console.log('üîÑ Webhook –æ—Ç n8n - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è chatId:', chatId);
        console.log('üìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AI:', message);
        
        messageStore.set(chatId, message);
        console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç n8n —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        
        return new Response(JSON.stringify({ 
          success: true, 
          message: '–û—Ç–≤–µ—Ç –æ—Ç n8n —Å–æ—Ö—Ä–∞–Ω–µ–Ω' 
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
      }
    }
    
    if (req.method === 'GET') {
      const url = new URL(req.url);
      const chatId = url.searchParams.get('chatId');
      
      console.log('üîç GET –∑–∞–ø—Ä–æ—Å –¥–ª—è chatId:', chatId);
      
      if (!chatId) {
        return new Response(JSON.stringify({ 
          success: false, 
          error: 'Missing chatId' 
        }), {
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
      }
      
      const message = messageStore.get(chatId);
      
      if (message) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message.substring(0, 50) + '...');
        messageStore.delete(chatId); // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è
        
        return new Response(JSON.stringify({ 
          success: true, 
          message: message 
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
      } else {
        console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return new Response(JSON.stringify({ 
          success: false, 
          message: null 
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
      }
    }
    
    return new Response(JSON.stringify({ 
      error: 'Method not allowed' 
    }), {
      status: 405,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤ chat-api:', error);
    return new Response(JSON.stringify({ 
      error: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
});
