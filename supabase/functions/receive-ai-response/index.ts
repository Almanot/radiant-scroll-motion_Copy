
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// –£–ª—É—á—à–µ–Ω–Ω–æ–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
const responseStore = new Map<string, { 
  message: string; 
  timestamp: number;
  userId?: string;
}>();

const TTL = 120000; // 2 –º–∏–Ω—É—Ç—ã

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
const cleanupOldEntries = () => {
  const now = Date.now();
  let cleanedCount = 0;
  for (const [key, value] of responseStore.entries()) {
    if (now - value.timestamp > TTL) {
      responseStore.delete(key);
      cleanedCount++;
    }
  }
  if (cleanedCount > 0) {
    console.log(`üßπ –û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${cleanedCount}`);
  }
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const body = await req.json();
    console.log('=== RECEIVE-AI-RESPONSE ===');
    
    const { message, chatId, chat_id, userId, action } = body;
    const finalChatId = chatId || chat_id;

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
    cleanupOldEntries();

    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    if (action === 'get_response' && finalChatId) {
      console.log('üîç –ü–û–ò–°–ö –û–¢–í–ï–¢–ê –¥–ª—è:', finalChatId);
      console.log('üì¶ –†–∞–∑–º–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', responseStore.size);
      
      const storedData = responseStore.get(finalChatId);
      
      if (storedData) {
        const age = Math.round((Date.now() - storedData.timestamp) / 1000);
        console.log('‚úÖ –û–¢–í–ï–¢ –ù–ê–ô–î–ï–ù, –≤–æ–∑—Ä–∞—Å—Ç:', age, '—Å–µ–∫');
        
        // –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è
        responseStore.delete(finalChatId);
        
        return new Response(JSON.stringify({ 
          success: true,
          message: storedData.message,
          retrievedAt: new Date().toISOString()
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        });
      }

      console.log('‚ùå –û–¢–í–ï–¢ –ù–ï –ù–ê–ô–î–ï–ù');
      return new Response(JSON.stringify({ 
        success: false,
        message: null
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç n8n
    if (message && finalChatId) {
      console.log('üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –û–¢–í–ï–¢–ê –û–¢ N8N');
      console.log('Chat ID:', finalChatId);
      console.log('–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', message.length);

      responseStore.set(finalChatId, {
        message: message,
        timestamp: Date.now(),
        userId: userId
      });

      console.log('‚úÖ –û–¢–í–ï–¢ –°–û–•–†–ê–ù–ï–ù');
      console.log('üìä –†–∞–∑–º–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', responseStore.size);

      return new Response(JSON.stringify({ 
        success: true,
        chatId: finalChatId,
        status: 'response_stored'
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    console.log('‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –î–ê–ù–ù–´–•');
    return new Response(JSON.stringify({
      error: 'Missing required fields',
      success: false
    }), {
      status: 400,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('üí• –û–®–ò–ë–ö–ê:', error);
    
    return new Response(JSON.stringify({ 
      error: error.message || 'Internal server error',
      success: false
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
