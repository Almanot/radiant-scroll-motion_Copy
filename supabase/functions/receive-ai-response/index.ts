
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// –ü—Ä–æ—Å—Ç–æ–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–≤–µ—Ç–æ–≤
const responseStore = new Map<string, { message: string; timestamp: number }>();
const TTL = 120000; // 2 –º–∏–Ω—É—Ç—ã

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const body = await req.json();
    console.log('=== RECEIVE-AI-RESPONSE ===');
    console.log('–ó–∞–ø—Ä–æ—Å:', JSON.stringify(body, null, 2));
    
    const { message, chatId, chat_id, action } = body;
    const finalChatId = chatId || chat_id;

    // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    if (action === 'get_response' && finalChatId) {
      console.log('üîç –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è chat ID:', finalChatId);
      console.log('üì¶ –†–∞–∑–º–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', responseStore.size);
      console.log('üîë –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏:', Array.from(responseStore.keys()));
      
      const storedData = responseStore.get(finalChatId);
      
      if (storedData) {
        const age = Math.round((Date.now() - storedData.timestamp) / 1000);
        console.log('‚úÖ –ù–ê–ô–î–ï–ù –û–¢–í–ï–¢ –¥–ª—è —á–∞—Ç–∞:', finalChatId);
        console.log('‚è∞ –í–æ–∑—Ä–∞—Å—Ç –æ—Ç–≤–µ—Ç–∞:', age, '—Å–µ–∫—É–Ω–¥');
        
        // –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è
        responseStore.delete(finalChatId);
        console.log('üóëÔ∏è –û—Ç–≤–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
        
        return new Response(JSON.stringify({ 
          success: true,
          message: storedData.message
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        });
      }

      console.log('‚ùå –û–¢–í–ï–¢ –ù–ï –ù–ê–ô–î–ï–ù –¥–ª—è —á–∞—Ç–∞:', finalChatId);
      return new Response(JSON.stringify({ 
        success: false,
        message: null
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç n8n
    if (!message || !finalChatId) {
      console.log('‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø');
      console.log('message:', !!message, 'chatId/chat_id:', !!finalChatId);
      
      return new Response(JSON.stringify({
        error: 'Missing required fields: message, chatId',
        success: false
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    console.log('üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –û–¢–í–ï–¢–ê –û–¢ N8N');
    console.log('Chat ID:', finalChatId);
    console.log('–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', message.length);
    console.log('–ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤:', message.substring(0, 100));

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–π
    const now = Date.now();
    let cleanedCount = 0;
    for (const [key, value] of responseStore.entries()) {
      if (now - value.timestamp > TTL) {
        responseStore.delete(key);
        cleanedCount++;
      }
    }
    if (cleanedCount > 0) {
      console.log('üßπ –û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π:', cleanedCount);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    responseStore.set(finalChatId, {
      message: message,
      timestamp: now
    });

    console.log('‚úÖ –û–¢–í–ï–¢ –£–°–ü–ï–®–ù–û –°–û–•–†–ê–ù–ï–ù');
    console.log('üìä –†–∞–∑–º–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', responseStore.size);
    console.log('üîë –í—Å–µ –∫–ª—é—á–∏:', Array.from(responseStore.keys()));

    return new Response(JSON.stringify({ 
      success: true,
      chatId: finalChatId,
      status: 'response_stored',
      timestamp: new Date().toISOString(),
      storageSize: responseStore.size
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    console.error('Stack trace:', error.stack);
    
    return new Response(JSON.stringify({ 
      error: error.message || 'Internal server error',
      success: false
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
