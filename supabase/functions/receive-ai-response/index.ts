
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// –ï–¥–∏–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–≤–µ—Ç–æ–≤ —Å TTL
const responseStore = new Map<string, { message: string; timestamp: number }>();
const TTL = 300000; // 5 –º–∏–Ω—É—Ç

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
setInterval(() => {
  const now = Date.now();
  let cleanedCount = 0;
  for (const [key, value] of responseStore.entries()) {
    if (now - value.timestamp > TTL) {
      responseStore.delete(key);
      cleanedCount++;
    }
  }
  if (cleanedCount > 0) {
    console.log(`–û—á–∏—â–µ–Ω–æ ${cleanedCount} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π`);
  }
}, 60000);

serve(async (req) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const body = await req.json();
    console.log('=== RECEIVE-AI-RESPONSE ===');
    console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', JSON.stringify(body, null, 2));
    
    const { message, chatId, userId, action } = body;

    // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    if (action === 'get_response' && chatId) {
      console.log('–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è chat ID:', chatId);
      console.log('–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', responseStore.size);
      
      const storedData = responseStore.get(chatId);
      
      if (storedData) {
        console.log('‚úÖ –ù–ê–ô–î–ï–ù –û–¢–í–ï–¢ –¥–ª—è —á–∞—Ç–∞:', chatId);
        console.log('–í—Ä–µ–º—è —Ö—Ä–∞–Ω–µ–Ω–∏—è:', Math.round((Date.now() - storedData.timestamp) / 1000), '—Å–µ–∫—É–Ω–¥');
        
        // –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è
        responseStore.delete(chatId);
        console.log('–û—Ç–≤–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
        
        return new Response(JSON.stringify({ 
          success: true,
          message: storedData.message
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        });
      }

      console.log('‚ùå –û–¢–í–ï–¢ –ù–ï –ù–ê–ô–î–ï–ù –¥–ª—è —á–∞—Ç–∞:', chatId);
      console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:', Array.from(responseStore.keys()));
      
      return new Response(JSON.stringify({ 
        success: false,
        message: null
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç n8n
    if (!message || !chatId) {
      console.log('‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–¢ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø');
      console.log('message:', !!message, 'chatId:', !!chatId);
      
      return new Response(JSON.stringify({
        error: 'Missing required fields: message, chatId',
        success: false
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    console.log('üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –û–¢–í–ï–¢–ê –û–¢ N8N');
    console.log('Chat ID:', chatId);
    console.log('User ID:', userId);
    console.log('–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', message.length, '—Å–∏–º–≤–æ–ª–æ–≤');
    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):', message.substring(0, 200) + '...');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç —Å timestamp
    responseStore.set(chatId, {
      message: message,
      timestamp: Date.now()
    });

    console.log('‚úÖ –û–¢–í–ï–¢ –£–°–ü–ï–®–ù–û –°–û–•–†–ê–ù–ï–ù');
    console.log('–ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', responseStore.size);
    console.log('–í—Å–µ –∫–ª—é—á–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:', Array.from(responseStore.keys()));

    return new Response(JSON.stringify({ 
      success: true,
      chatId: chatId,
      status: 'response_stored',
      timestamp: new Date().toISOString(),
      storageSize: responseStore.size
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ receive-ai-response:', error);
    console.error('Stack trace:', error.stack);
    
    return new Response(JSON.stringify({ 
      error: error.message || 'Internal server error',
      success: false
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
