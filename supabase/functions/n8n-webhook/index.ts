
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// –ü—Ä–æ—Å—Ç–æ–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
const responseStore = new Map<string, { message: string; timestamp: number }>();
const TTL = 300000; // 5 –º–∏–Ω—É—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  console.log('=== N8N-WEBHOOK ===');
  console.log('Method:', req.method);
  console.log('URL:', req.url);

  try {
    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    const now = Date.now();
    for (const [key, value] of responseStore.entries()) {
      if (now - value.timestamp > TTL) {
        responseStore.delete(key);
        console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –æ—Ç–≤–µ—Ç:', key);
      }
    }

    if (req.method === 'POST') {
      const body = await req.json();
      const { chatId, message, chat_id } = body;
      const finalChatId = chatId || chat_id;

      console.log('üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç n8n:');
      console.log('Chat ID:', finalChatId);
      console.log('Message:', message?.substring(0, 100) + '...');

      if (!finalChatId || !message) {
        console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
        return new Response(JSON.stringify({ 
          error: 'Missing chatId or message',
          success: false
        }), {
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
      responseStore.set(finalChatId, {
        message: message,
        timestamp: now
      });

      console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è chatId:', finalChatId);
      console.log('üìä –†–∞–∑–º–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', responseStore.size);
      console.log('üìã –í—Å–µ chatId –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:', Array.from(responseStore.keys()));

      return new Response(JSON.stringify({ 
        success: true,
        message: 'Response stored successfully'
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    if (req.method === 'GET') {
      console.log('üîç GET –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
      console.log('üìã –í—Å–µ chatId –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:', Array.from(responseStore.keys()));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—å –∫–∞–∫–∏–µ-—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (responseStore.size === 0) {
        console.log('üì™ –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—É—Å—Ç–æ–µ');
        return new Response(JSON.stringify({ 
          success: false,
          message: null
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        });
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
      const [firstChatId, firstData] = Array.from(responseStore.entries())[0];
      console.log('üéØ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è:', firstChatId);
      
      responseStore.delete(firstChatId); // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è
      
      return new Response(JSON.stringify({ 
        success: true,
        message: firstData.message
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    return new Response(JSON.stringify({
      error: 'Method not allowed',
      success: false
    }), {
      status: 405,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤ n8n-webhook:', error);
    
    return new Response(JSON.stringify({ 
      error: 'Internal server error',
      success: false
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
