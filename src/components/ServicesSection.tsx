
import React, { useState, useCallback } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent } from "@/components/ui/tabs";
import { ArrowLeft, ArrowRight } from "lucide-react";
import { MovingBorder } from "@/components/ui/moving-border";

interface ServicesSectionProps {
  className?: string;
}

const ServicesSection: React.FC<ServicesSectionProps> = ({ className = "" }) => {
  const [activeTab, setActiveTab] = useState("0");

  const services = [
    {
      id: "0",
      title: "–ê–£–î–ò–¢ –ò –ê–ù–ê–õ–ò–ó",
      description: "–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ò–¢-–∞—É–¥–∏—Ç–∞ –∏ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏.",
      icon: "üìä"
    },
    {
      id: "1",
      title: "–ü–†–û–ï–ö–¢–ò–†–û–í–ê–ù–ò–ï",
      description: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ò–¢-–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏ –¥–∏–∑–∞–π–Ω–∞ —Ä–µ—à–µ–Ω–∏–π, —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–æ–Ω–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤.",
      icon: "üîß"
    },
    {
      id: "2",
      title: "–í–ù–ï–î–†–ï–ù–ò–ï",
      description: "–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –∏ —Å–µ—Ä–≤–∏—Å–æ–≤, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏.",
      icon: "üöÄ"
    }
  ];

  const handlePrevious = useCallback(() => {
    const currentIndex = parseInt(activeTab);
    const newIndex = currentIndex === 0 ? services.length - 1 : currentIndex - 1;
    setActiveTab(newIndex.toString());
  }, [activeTab, services.length]);

  const handleNext = useCallback(() => {
    const currentIndex = parseInt(activeTab);
    const newIndex = currentIndex === services.length - 1 ? 0 : currentIndex + 1;
    setActiveTab(newIndex.toString());
  }, [activeTab, services.length]);
  
  // Track touch events for swiping
  const touchStartX = React.useRef(0);
  const touchEndX = React.useRef(0);
  
  const handleTouchStart = (e: React.TouchEvent) => {
    touchStartX.current = e.touches[0].clientX;
  };
  
  const handleTouchEnd = (e: React.TouchEvent) => {
    touchEndX.current = e.changedTouches[0].clientX;
    handleSwipe();
  };
  
  const handleSwipe = () => {
    // Minimum distance required for swipe
    const minSwipeDistance = 50;
    const distance = touchEndX.current - touchStartX.current;
    
    if (Math.abs(distance) < minSwipeDistance) return;
    
    if (distance > 0) {
      // Swiped right
      handlePrevious();
    } else {
      // Swiped left
      handleNext();
    }
  };

  return (
    <section id="services" className={`min-h-screen relative py-20 ${className}`}>
      <div className="container mx-auto px-4 relative z-10">
        <div className="connexi-gradient-text text-xl mb-6 reveal-on-scroll">–ù–ê–®–ò –£–°–õ–£–ì–ò</div>
        
        <div className="max-w-5xl mx-auto">
          <h2 className="text-4xl md:text-5xl lg:text-6xl font-bold mb-16 text-center reveal-on-scroll">
            <span className={`${className?.includes('text-white') ? 'text-white' : 'text-gray-800'}`}>–ö–û–ú–ü–õ–ï–ö–°–ù–û </span>
            <span className="connexi-gradient-text">–†–ï–®–ê–ï–ú<br />–ó–ê–î–ê–ß–ò</span>
          </h2>

          <div className="card-glow absolute inset-0 -z-10 bg-connexi-purple/5 rounded-xl blur-3xl"></div>
          
          <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
            <div className="flex justify-center mb-8 reveal-on-scroll">
              <div className="flex gap-4">
                <Button 
                  variant="outline" 
                  size="icon" 
                  className={`h-12 w-12 rounded-full custom-carousel-button ${className?.includes('bg-gray-900') ? 'bg-gray-800 border-gray-700 text-white' : ''}`}
                  onClick={handlePrevious}
                  aria-label="–ü—Ä–µ–¥—ã–¥—É—â–∞—è —É—Å–ª—É–≥–∞"
                >
                  <ArrowLeft className="h-5 w-5" />
                </Button>
                <Button 
                  variant="outline" 
                  size="icon" 
                  className={`h-12 w-12 rounded-full custom-carousel-button ${className?.includes('bg-gray-900') ? 'bg-gray-800 border-gray-700 text-white' : ''}`}
                  onClick={handleNext}
                  aria-label="–°–ª–µ–¥—É—é—â–∞—è —É—Å–ª—É–≥–∞"
                >
                  <ArrowRight className="h-5 w-5" />
                </Button>
              </div>
            </div>
            
            {services.map((service) => (
              <TabsContent 
                key={service.id} 
                value={service.id}
                className="mt-0 services-tab-content fade-transition"
                onTouchStart={handleTouchStart}
                onTouchEnd={handleTouchEnd}
              >
                <div className="relative p-[1px] rounded-lg overflow-hidden reveal-on-scroll">
                  <MovingBorder duration={3000} rx="1rem" ry="1rem">
                    <div className="h-20 w-20 opacity-[0.8] bg-[radial-gradient(var(--connexi-purple)_40%,var(--connexi-pink)_60%,transparent_85%)]" />
                  </MovingBorder>
                
                  <Card className="relative border-none bg-white/80 backdrop-blur-sm rounded-lg p-4 z-10">
                    <CardContent className="p-6">
                      <div className="flex items-center gap-4 mb-6">
                        <div className="text-4xl">{service.icon}</div>
                        <h3 className={`text-2xl ${className?.includes('text-white') ? 'text-white' : 'text-gray-800'}`}># {service.title}</h3>
                      </div>
                      <p className={className?.includes('text-white') ? 'text-gray-300' : 'text-gray-700'}>{service.description}</p>
                    </CardContent>
                  </Card>
                </div>
              </TabsContent>
            ))}
          </Tabs>
          
          {/* Simplified indicator dots - only essential UI element kept */}
          <div className="flex justify-center mt-8">
            <div className="flex gap-3 reveal-on-scroll">
              {services.map((service, index) => (
                <div
                  key={service.id}
                  onClick={() => setActiveTab(index.toString())}
                  className={`w-3 h-3 rounded-full cursor-pointer transition-all indicator-dot ${
                    activeTab === index.toString() ? "active scale-125" : "bg-gray-400 hover:bg-connexi-purple/50"
                  }`}
                />
              ))}
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default ServicesSection;
