
import { useState, useCallback } from 'react';
import { supabase } from '@/integrations/supabase/client';

interface Message {
  id: string;
  content: string;
  role: 'user' | 'assistant';
  timestamp: Date;
}

export const useSimpleChat = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const addMessage = useCallback((content: string, role: 'user' | 'assistant') => {
    const newMessage: Message = {
      id: `${role}-${Date.now()}-${Math.random().toString(36).substring(2)}`,
      content,
      role,
      timestamp: new Date()
    };
    
    setMessages(prev => [...prev, newMessage]);
    return newMessage.id;
  }, []);

  const sendMessage = useCallback(async (message: string, chatId: string) => {
    setIsLoading(true);
    setError(null);

    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ n8n:', { message, chat_id: chatId });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ n8n webhook —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ç–µ–ª–∞
      const response = await fetch('https://n8n.srv838454.hstgr.cloud/webhook/84ac1eaf-efe6-4517-bc28-5b239286b274', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          message: message
        })
      });

      if (!response.ok) {
        throw new Error(`N8N webhook error: ${response.status}`);
      }

      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ n8n');

      // –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∞
      const maxAttempts = 24; // 2 –º–∏–Ω—É—Ç—ã (24 * 5 —Å–µ–∫—É–Ω–¥)
      let attempts = 0;

      const pollForResponse = async (): Promise<string | null> => {
        while (attempts < maxAttempts) {
          attempts++;
          
          try {
            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts} –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç`);
            
            const { data, error } = await supabase.functions.invoke('n8n-webhook', {
              method: 'GET',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ chatId })
            });

            if (error) {
              console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error);
              await new Promise(resolve => setTimeout(resolve, 5000));
              continue;
            }

            if (data?.success && data?.message) {
              console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç n8n');
              return data.message;
            }

            // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await new Promise(resolve => setTimeout(resolve, 5000));
          } catch (err) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞:', err);
            await new Promise(resolve => setTimeout(resolve, 5000));
          }
        }

        return null;
      };

      const aiResponse = await pollForResponse();

      if (aiResponse) {
        addMessage(aiResponse, 'assistant');
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç');
      }

    } catch (err) {
      console.error('üí• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      addMessage(`–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${errorMessage}`, 'assistant');
    } finally {
      setIsLoading(false);
    }
  }, [addMessage]);

  const clearMessages = useCallback(() => {
    setMessages([]);
    setError(null);
  }, []);

  return {
    messages,
    isLoading,
    error,
    sendMessage,
    addMessage,
    clearMessages,
    clearError: () => setError(null)
  };
};
