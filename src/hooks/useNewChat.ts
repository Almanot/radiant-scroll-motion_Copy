
import { useState, useCallback } from 'react';
import { supabase } from '@/integrations/supabase/client';

interface Message {
  id: string;
  content: string;
  role: 'user' | 'assistant';
  timestamp: Date;
}

export const useNewChat = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const addMessage = useCallback((content: string, role: 'user' | 'assistant') => {
    const newMessage: Message = {
      id: `${role}-${Date.now()}-${Math.random().toString(36).substring(2)}`,
      content,
      role,
      timestamp: new Date()
    };
    
    setMessages(prev => [...prev, newMessage]);
    return newMessage.id;
  }, []);

  const sendMessage = useCallback(async (message: string, chatId: string) => {
    setIsLoading(true);
    setError(null);

    try {
      console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', { message, chatId });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const { data: sendData, error: sendError } = await supabase.functions.invoke('chat-api', {
        body: {
          action: 'send',
          chatId: chatId,
          userMessage: message
        }
      });

      if (sendError) {
        throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${sendError.message}`);
      }

      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', sendData);

      // –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∞
      const maxAttempts = 30; // 2 –º–∏–Ω—É—Ç—ã
      let attempts = 0;

      while (attempts < maxAttempts) {
        attempts++;
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts} –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç`);
        
        await new Promise(resolve => setTimeout(resolve, 4000)); // –ñ–¥–µ–º 4 —Å–µ–∫—É–Ω–¥—ã
        
        // –î–µ–ª–∞–µ–º GET –∑–∞–ø—Ä–æ—Å
        const response = await fetch(`https://mdlyglpbdqvgwnayumhh.supabase.co/functions/v1/chat-api?chatId=${chatId}`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${supabase.supabaseKey}`,
            'apikey': supabase.supabaseKey,
            'Content-Type': 'application/json'
          }
        });

        if (!response.ok) {
          console.log('‚ùå –û—à–∏–±–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞:', response.status);
          continue;
        }

        const responseData = await response.json();
        console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç API:', responseData);

        if (responseData?.success && responseData?.message) {
          console.log('üéâ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç AI!');
          addMessage(responseData.message, 'assistant');
          return;
        }
      }

      throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞');

    } catch (err) {
      console.error('üí• –û—à–∏–±–∫–∞:', err);
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      addMessage(`–û—à–∏–±–∫–∞: ${errorMessage}`, 'assistant');
    } finally {
      setIsLoading(false);
    }
  }, [addMessage]);

  const clearMessages = useCallback(() => {
    setMessages([]);
    setError(null);
  }, []);

  return {
    messages,
    isLoading,
    error,
    sendMessage,
    addMessage,
    clearMessages,
    clearError: () => setError(null)
  };
};
